Grammar:

Rule 0     S' -> program
Rule 1     program -> functions
Rule 2     var_name -> array_name
Rule 3     var_name -> ID
Rule 4     array_name -> ID LSBRACKET arithmetic_layer RSBRACKET
Rule 5     functions -> <empty>
Rule 6     functions -> function functions
Rule 7     function -> ID LPAREN formal_params RPAREN COLON return_type scope
Rule 8     formal_params -> <empty>
Rule 9     formal_params -> var_name type multi_formal_params
Rule 10    multi_formal_params -> <empty>
Rule 11    multi_formal_params -> COMMA var_name type multi_formal_params
Rule 12    function_call -> ID LPAREN actual_params RPAREN
Rule 13    actual_params -> <empty>
Rule 14    actual_params -> expression multi_actual_params
Rule 15    multi_actual_params -> <empty>
Rule 16    multi_actual_params -> COMMA expression multi_actual_params
Rule 17    statements -> <empty>
Rule 18    statements -> statement statements
Rule 19    statement -> END
Rule 20    statement -> if_statement
Rule 21    statement -> while_statement
Rule 22    statement -> scope
Rule 23    statement -> assignment END
Rule 24    statement -> declaration_init END
Rule 25    statement -> declaration END
Rule 26    statement -> expression END
Rule 27    while_statement -> WHILE LPAREN expression RPAREN scope
Rule 28    if_statement -> IF LPAREN expression RPAREN scope else_statement
Rule 29    else_statement -> <empty>
Rule 30    else_statement -> ELSE if_statement
Rule 31    else_statement -> ELSE scope
Rule 32    declaration -> var_name COLON type
Rule 33    declaration_init -> var_name COLON type ASSIGN expression
Rule 34    assignment -> ID LSBRACKET arithmetic_layer RSBRACKET ASSIGN expression
Rule 35    assignment -> ID ASSIGN expression
Rule 36    expression -> comparison_layer
Rule 37    expression -> expression OR comparison_layer
Rule 38    expression -> expression AND comparison_layer
Rule 39    expression -> ID LSBRACKET arithmetic_layer RSBRACKET
Rule 40    comparison_layer -> arithmetic_layer
Rule 41    comparison_layer -> comparison_layer COMPARATOR arithmetic_layer
Rule 42    arithmetic_layer -> term
Rule 43    arithmetic_layer -> arithmetic_layer MINUS term
Rule 44    arithmetic_layer -> arithmetic_layer PLUS term
Rule 45    term -> factor
Rule 46    term -> term DIVISION factor
Rule 47    term -> term MULTIPLICATION factor
Rule 48    factor -> ID
Rule 49    factor -> value
Rule 50    factor -> LPAREN expression RPAREN
Rule 51    factor -> function_call
Rule 52    type -> BOOL_TYPE
Rule 53    type -> STRING_TYPE
Rule 54    type -> CHAR_TYPE
Rule 55    type -> FLOAT_TYPE
Rule 56    type -> UNSIGNED_TYPE
Rule 57    type -> SIGNED_TYPE
Rule 58    return_type -> ABYSS_TYPE
Rule 59    return_type -> type
Rule 60    value -> STRING_VALUE
Rule 61    value -> CHAR_VALUE
Rule 62    value -> BOOL_VALUE
Rule 63    value -> FLOAT_VALUE
Rule 64    value -> INTEGRAL_VALUE
Rule 65    scope -> LBRACE new_scope statements pop_scope RBRACE
Rule 66    new_scope -> <empty>
Rule 67    pop_scope -> <empty>

Unused terminals:

    EXTRACTION
    INSERTION

Terminals, with rules where they appear:

ABYSS_TYPE           : 58
AND                  : 38
ASSIGN               : 33 34 35
BOOL_TYPE            : 52
BOOL_VALUE           : 62
CHAR_TYPE            : 54
CHAR_VALUE           : 61
COLON                : 7 32 33
COMMA                : 11 16
COMPARATOR           : 41
DIVISION             : 46
ELSE                 : 30 31
END                  : 19 23 24 25 26
EXTRACTION           : 
FLOAT_TYPE           : 55
FLOAT_VALUE          : 63
ID                   : 3 4 7 12 34 35 39 48
IF                   : 28
INSERTION            : 
INTEGRAL_VALUE       : 64
LBRACE               : 65
LPAREN               : 7 12 27 28 50
LSBRACKET            : 4 34 39
MINUS                : 43
MULTIPLICATION       : 47
OR                   : 37
PLUS                 : 44
RBRACE               : 65
RPAREN               : 7 12 27 28 50
RSBRACKET            : 4 34 39
SIGNED_TYPE          : 57
STRING_TYPE          : 53
STRING_VALUE         : 60
UNSIGNED_TYPE        : 56
WHILE                : 27
error                : 

Nonterminals, with rules where they appear:

actual_params        : 12
arithmetic_layer     : 4 34 39 40 41 43 44
array_name           : 2
assignment           : 23
comparison_layer     : 36 37 38 41
declaration          : 25
declaration_init     : 24
else_statement       : 28
expression           : 14 16 26 27 28 33 34 35 37 38 50
factor               : 45 46 47
formal_params        : 7
function             : 6
function_call        : 51
functions            : 1 6
if_statement         : 20 30
multi_actual_params  : 14 16
multi_formal_params  : 9 11
new_scope            : 65
pop_scope            : 65
program              : 0
return_type          : 7
scope                : 7 22 27 28 31
statement            : 18
statements           : 18 65
term                 : 42 43 44 46 47
type                 : 9 11 32 33 59
value                : 49
var_name             : 9 11 32 33
while_statement      : 21


state 0

    (0) S' -> . program
    (1) program -> . functions
    (5) functions -> .
    (6) functions -> . function functions
    (7) function -> . ID LPAREN formal_params RPAREN COLON return_type scope
    $end            reduce using rule 5 (functions -> .)
    ID              shift and go to state 4

    program                        shift and go to state 1
    functions                      shift and go to state 2
    function                       shift and go to state 3

state 1

    (0) S' -> program .


state 2

    (1) program -> functions .
    $end            reduce using rule 1 (program -> functions .)


state 3

    (6) functions -> function . functions
    (5) functions -> .
    (6) functions -> . function functions
    (7) function -> . ID LPAREN formal_params RPAREN COLON return_type scope
    $end            reduce using rule 5 (functions -> .)
    ID              shift and go to state 4

    function                       shift and go to state 3
    functions                      shift and go to state 5

state 4

    (7) function -> ID . LPAREN formal_params RPAREN COLON return_type scope
    LPAREN          shift and go to state 6


state 5

    (6) functions -> function functions .
    $end            reduce using rule 6 (functions -> function functions .)


state 6

    (7) function -> ID LPAREN . formal_params RPAREN COLON return_type scope
    (8) formal_params -> .
    (9) formal_params -> . var_name type multi_formal_params
    (2) var_name -> . array_name
    (3) var_name -> . ID
    (4) array_name -> . ID LSBRACKET arithmetic_layer RSBRACKET
    RPAREN          reduce using rule 8 (formal_params -> .)
    ID              shift and go to state 7

    formal_params                  shift and go to state 8
    var_name                       shift and go to state 9
    array_name                     shift and go to state 10

state 7

    (3) var_name -> ID .
    (4) array_name -> ID . LSBRACKET arithmetic_layer RSBRACKET
    BOOL_TYPE       reduce using rule 3 (var_name -> ID .)
    STRING_TYPE     reduce using rule 3 (var_name -> ID .)
    CHAR_TYPE       reduce using rule 3 (var_name -> ID .)
    FLOAT_TYPE      reduce using rule 3 (var_name -> ID .)
    UNSIGNED_TYPE   reduce using rule 3 (var_name -> ID .)
    SIGNED_TYPE     reduce using rule 3 (var_name -> ID .)
    LSBRACKET       shift and go to state 11


state 8

    (7) function -> ID LPAREN formal_params . RPAREN COLON return_type scope
    RPAREN          shift and go to state 12


state 9

    (9) formal_params -> var_name . type multi_formal_params
    (52) type -> . BOOL_TYPE
    (53) type -> . STRING_TYPE
    (54) type -> . CHAR_TYPE
    (55) type -> . FLOAT_TYPE
    (56) type -> . UNSIGNED_TYPE
    (57) type -> . SIGNED_TYPE
    BOOL_TYPE       shift and go to state 14
    STRING_TYPE     shift and go to state 15
    CHAR_TYPE       shift and go to state 16
    FLOAT_TYPE      shift and go to state 17
    UNSIGNED_TYPE   shift and go to state 18
    SIGNED_TYPE     shift and go to state 19

    type                           shift and go to state 13

state 10

    (2) var_name -> array_name .
    BOOL_TYPE       reduce using rule 2 (var_name -> array_name .)
    STRING_TYPE     reduce using rule 2 (var_name -> array_name .)
    CHAR_TYPE       reduce using rule 2 (var_name -> array_name .)
    FLOAT_TYPE      reduce using rule 2 (var_name -> array_name .)
    UNSIGNED_TYPE   reduce using rule 2 (var_name -> array_name .)
    SIGNED_TYPE     reduce using rule 2 (var_name -> array_name .)
    COLON           reduce using rule 2 (var_name -> array_name .)


state 11

    (4) array_name -> ID LSBRACKET . arithmetic_layer RSBRACKET
    (42) arithmetic_layer -> . term
    (43) arithmetic_layer -> . arithmetic_layer MINUS term
    (44) arithmetic_layer -> . arithmetic_layer PLUS term
    (45) term -> . factor
    (46) term -> . term DIVISION factor
    (47) term -> . term MULTIPLICATION factor
    (48) factor -> . ID
    (49) factor -> . value
    (50) factor -> . LPAREN expression RPAREN
    (51) factor -> . function_call
    (60) value -> . STRING_VALUE
    (61) value -> . CHAR_VALUE
    (62) value -> . BOOL_VALUE
    (63) value -> . FLOAT_VALUE
    (64) value -> . INTEGRAL_VALUE
    (12) function_call -> . ID LPAREN actual_params RPAREN
    ID              shift and go to state 20
    LPAREN          shift and go to state 25
    STRING_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    FLOAT_VALUE     shift and go to state 30
    INTEGRAL_VALUE  shift and go to state 31

    arithmetic_layer               shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    value                          shift and go to state 24
    function_call                  shift and go to state 26

state 12

    (7) function -> ID LPAREN formal_params RPAREN . COLON return_type scope
    COLON           shift and go to state 32


state 13

    (9) formal_params -> var_name type . multi_formal_params
    (10) multi_formal_params -> .
    (11) multi_formal_params -> . COMMA var_name type multi_formal_params
    RPAREN          reduce using rule 10 (multi_formal_params -> .)
    COMMA           shift and go to state 34

    multi_formal_params            shift and go to state 33

state 14

    (52) type -> BOOL_TYPE .
    COMMA           reduce using rule 52 (type -> BOOL_TYPE .)
    RPAREN          reduce using rule 52 (type -> BOOL_TYPE .)
    LBRACE          reduce using rule 52 (type -> BOOL_TYPE .)
    ASSIGN          reduce using rule 52 (type -> BOOL_TYPE .)
    END             reduce using rule 52 (type -> BOOL_TYPE .)


state 15

    (53) type -> STRING_TYPE .
    COMMA           reduce using rule 53 (type -> STRING_TYPE .)
    RPAREN          reduce using rule 53 (type -> STRING_TYPE .)
    LBRACE          reduce using rule 53 (type -> STRING_TYPE .)
    ASSIGN          reduce using rule 53 (type -> STRING_TYPE .)
    END             reduce using rule 53 (type -> STRING_TYPE .)


state 16

    (54) type -> CHAR_TYPE .
    COMMA           reduce using rule 54 (type -> CHAR_TYPE .)
    RPAREN          reduce using rule 54 (type -> CHAR_TYPE .)
    LBRACE          reduce using rule 54 (type -> CHAR_TYPE .)
    ASSIGN          reduce using rule 54 (type -> CHAR_TYPE .)
    END             reduce using rule 54 (type -> CHAR_TYPE .)


state 17

    (55) type -> FLOAT_TYPE .
    COMMA           reduce using rule 55 (type -> FLOAT_TYPE .)
    RPAREN          reduce using rule 55 (type -> FLOAT_TYPE .)
    LBRACE          reduce using rule 55 (type -> FLOAT_TYPE .)
    ASSIGN          reduce using rule 55 (type -> FLOAT_TYPE .)
    END             reduce using rule 55 (type -> FLOAT_TYPE .)


state 18

    (56) type -> UNSIGNED_TYPE .
    COMMA           reduce using rule 56 (type -> UNSIGNED_TYPE .)
    RPAREN          reduce using rule 56 (type -> UNSIGNED_TYPE .)
    LBRACE          reduce using rule 56 (type -> UNSIGNED_TYPE .)
    ASSIGN          reduce using rule 56 (type -> UNSIGNED_TYPE .)
    END             reduce using rule 56 (type -> UNSIGNED_TYPE .)


state 19

    (57) type -> SIGNED_TYPE .
    COMMA           reduce using rule 57 (type -> SIGNED_TYPE .)
    RPAREN          reduce using rule 57 (type -> SIGNED_TYPE .)
    LBRACE          reduce using rule 57 (type -> SIGNED_TYPE .)
    ASSIGN          reduce using rule 57 (type -> SIGNED_TYPE .)
    END             reduce using rule 57 (type -> SIGNED_TYPE .)


state 20

    (48) factor -> ID .
    (12) function_call -> ID . LPAREN actual_params RPAREN
    DIVISION        reduce using rule 48 (factor -> ID .)
    MULTIPLICATION  reduce using rule 48 (factor -> ID .)
    RSBRACKET       reduce using rule 48 (factor -> ID .)
    MINUS           reduce using rule 48 (factor -> ID .)
    PLUS            reduce using rule 48 (factor -> ID .)
    COMPARATOR      reduce using rule 48 (factor -> ID .)
    RPAREN          reduce using rule 48 (factor -> ID .)
    OR              reduce using rule 48 (factor -> ID .)
    AND             reduce using rule 48 (factor -> ID .)
    COMMA           reduce using rule 48 (factor -> ID .)
    END             reduce using rule 48 (factor -> ID .)
    LPAREN          shift and go to state 35


state 21

    (4) array_name -> ID LSBRACKET arithmetic_layer . RSBRACKET
    (43) arithmetic_layer -> arithmetic_layer . MINUS term
    (44) arithmetic_layer -> arithmetic_layer . PLUS term
    RSBRACKET       shift and go to state 36
    MINUS           shift and go to state 37
    PLUS            shift and go to state 38


state 22

    (42) arithmetic_layer -> term .
    (46) term -> term . DIVISION factor
    (47) term -> term . MULTIPLICATION factor
    RSBRACKET       reduce using rule 42 (arithmetic_layer -> term .)
    MINUS           reduce using rule 42 (arithmetic_layer -> term .)
    PLUS            reduce using rule 42 (arithmetic_layer -> term .)
    COMPARATOR      reduce using rule 42 (arithmetic_layer -> term .)
    RPAREN          reduce using rule 42 (arithmetic_layer -> term .)
    OR              reduce using rule 42 (arithmetic_layer -> term .)
    AND             reduce using rule 42 (arithmetic_layer -> term .)
    COMMA           reduce using rule 42 (arithmetic_layer -> term .)
    END             reduce using rule 42 (arithmetic_layer -> term .)
    DIVISION        shift and go to state 39
    MULTIPLICATION  shift and go to state 40


state 23

    (45) term -> factor .
    DIVISION        reduce using rule 45 (term -> factor .)
    MULTIPLICATION  reduce using rule 45 (term -> factor .)
    RSBRACKET       reduce using rule 45 (term -> factor .)
    MINUS           reduce using rule 45 (term -> factor .)
    PLUS            reduce using rule 45 (term -> factor .)
    COMPARATOR      reduce using rule 45 (term -> factor .)
    RPAREN          reduce using rule 45 (term -> factor .)
    OR              reduce using rule 45 (term -> factor .)
    AND             reduce using rule 45 (term -> factor .)
    COMMA           reduce using rule 45 (term -> factor .)
    END             reduce using rule 45 (term -> factor .)


state 24

    (49) factor -> value .
    DIVISION        reduce using rule 49 (factor -> value .)
    MULTIPLICATION  reduce using rule 49 (factor -> value .)
    RSBRACKET       reduce using rule 49 (factor -> value .)
    MINUS           reduce using rule 49 (factor -> value .)
    PLUS            reduce using rule 49 (factor -> value .)
    COMPARATOR      reduce using rule 49 (factor -> value .)
    RPAREN          reduce using rule 49 (factor -> value .)
    OR              reduce using rule 49 (factor -> value .)
    AND             reduce using rule 49 (factor -> value .)
    COMMA           reduce using rule 49 (factor -> value .)
    END             reduce using rule 49 (factor -> value .)


state 25

    (50) factor -> LPAREN . expression RPAREN
    (36) expression -> . comparison_layer
    (37) expression -> . expression OR comparison_layer
    (38) expression -> . expression AND comparison_layer
    (39) expression -> . ID LSBRACKET arithmetic_layer RSBRACKET
    (40) comparison_layer -> . arithmetic_layer
    (41) comparison_layer -> . comparison_layer COMPARATOR arithmetic_layer
    (42) arithmetic_layer -> . term
    (43) arithmetic_layer -> . arithmetic_layer MINUS term
    (44) arithmetic_layer -> . arithmetic_layer PLUS term
    (45) term -> . factor
    (46) term -> . term DIVISION factor
    (47) term -> . term MULTIPLICATION factor
    (48) factor -> . ID
    (49) factor -> . value
    (50) factor -> . LPAREN expression RPAREN
    (51) factor -> . function_call
    (60) value -> . STRING_VALUE
    (61) value -> . CHAR_VALUE
    (62) value -> . BOOL_VALUE
    (63) value -> . FLOAT_VALUE
    (64) value -> . INTEGRAL_VALUE
    (12) function_call -> . ID LPAREN actual_params RPAREN
    ID              shift and go to state 43
    LPAREN          shift and go to state 25
    STRING_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    FLOAT_VALUE     shift and go to state 30
    INTEGRAL_VALUE  shift and go to state 31

    expression                     shift and go to state 41
    comparison_layer               shift and go to state 42
    arithmetic_layer               shift and go to state 44
    term                           shift and go to state 22
    factor                         shift and go to state 23
    value                          shift and go to state 24
    function_call                  shift and go to state 26

state 26

    (51) factor -> function_call .
    DIVISION        reduce using rule 51 (factor -> function_call .)
    MULTIPLICATION  reduce using rule 51 (factor -> function_call .)
    RSBRACKET       reduce using rule 51 (factor -> function_call .)
    MINUS           reduce using rule 51 (factor -> function_call .)
    PLUS            reduce using rule 51 (factor -> function_call .)
    COMPARATOR      reduce using rule 51 (factor -> function_call .)
    RPAREN          reduce using rule 51 (factor -> function_call .)
    OR              reduce using rule 51 (factor -> function_call .)
    AND             reduce using rule 51 (factor -> function_call .)
    COMMA           reduce using rule 51 (factor -> function_call .)
    END             reduce using rule 51 (factor -> function_call .)


state 27

    (60) value -> STRING_VALUE .
    DIVISION        reduce using rule 60 (value -> STRING_VALUE .)
    MULTIPLICATION  reduce using rule 60 (value -> STRING_VALUE .)
    RSBRACKET       reduce using rule 60 (value -> STRING_VALUE .)
    MINUS           reduce using rule 60 (value -> STRING_VALUE .)
    PLUS            reduce using rule 60 (value -> STRING_VALUE .)
    COMPARATOR      reduce using rule 60 (value -> STRING_VALUE .)
    RPAREN          reduce using rule 60 (value -> STRING_VALUE .)
    OR              reduce using rule 60 (value -> STRING_VALUE .)
    AND             reduce using rule 60 (value -> STRING_VALUE .)
    COMMA           reduce using rule 60 (value -> STRING_VALUE .)
    END             reduce using rule 60 (value -> STRING_VALUE .)


state 28

    (61) value -> CHAR_VALUE .
    DIVISION        reduce using rule 61 (value -> CHAR_VALUE .)
    MULTIPLICATION  reduce using rule 61 (value -> CHAR_VALUE .)
    RSBRACKET       reduce using rule 61 (value -> CHAR_VALUE .)
    MINUS           reduce using rule 61 (value -> CHAR_VALUE .)
    PLUS            reduce using rule 61 (value -> CHAR_VALUE .)
    COMPARATOR      reduce using rule 61 (value -> CHAR_VALUE .)
    RPAREN          reduce using rule 61 (value -> CHAR_VALUE .)
    OR              reduce using rule 61 (value -> CHAR_VALUE .)
    AND             reduce using rule 61 (value -> CHAR_VALUE .)
    COMMA           reduce using rule 61 (value -> CHAR_VALUE .)
    END             reduce using rule 61 (value -> CHAR_VALUE .)


state 29

    (62) value -> BOOL_VALUE .
    DIVISION        reduce using rule 62 (value -> BOOL_VALUE .)
    MULTIPLICATION  reduce using rule 62 (value -> BOOL_VALUE .)
    RSBRACKET       reduce using rule 62 (value -> BOOL_VALUE .)
    MINUS           reduce using rule 62 (value -> BOOL_VALUE .)
    PLUS            reduce using rule 62 (value -> BOOL_VALUE .)
    COMPARATOR      reduce using rule 62 (value -> BOOL_VALUE .)
    RPAREN          reduce using rule 62 (value -> BOOL_VALUE .)
    OR              reduce using rule 62 (value -> BOOL_VALUE .)
    AND             reduce using rule 62 (value -> BOOL_VALUE .)
    COMMA           reduce using rule 62 (value -> BOOL_VALUE .)
    END             reduce using rule 62 (value -> BOOL_VALUE .)


state 30

    (63) value -> FLOAT_VALUE .
    DIVISION        reduce using rule 63 (value -> FLOAT_VALUE .)
    MULTIPLICATION  reduce using rule 63 (value -> FLOAT_VALUE .)
    RSBRACKET       reduce using rule 63 (value -> FLOAT_VALUE .)
    MINUS           reduce using rule 63 (value -> FLOAT_VALUE .)
    PLUS            reduce using rule 63 (value -> FLOAT_VALUE .)
    COMPARATOR      reduce using rule 63 (value -> FLOAT_VALUE .)
    RPAREN          reduce using rule 63 (value -> FLOAT_VALUE .)
    OR              reduce using rule 63 (value -> FLOAT_VALUE .)
    AND             reduce using rule 63 (value -> FLOAT_VALUE .)
    COMMA           reduce using rule 63 (value -> FLOAT_VALUE .)
    END             reduce using rule 63 (value -> FLOAT_VALUE .)


state 31

    (64) value -> INTEGRAL_VALUE .
    DIVISION        reduce using rule 64 (value -> INTEGRAL_VALUE .)
    MULTIPLICATION  reduce using rule 64 (value -> INTEGRAL_VALUE .)
    RSBRACKET       reduce using rule 64 (value -> INTEGRAL_VALUE .)
    MINUS           reduce using rule 64 (value -> INTEGRAL_VALUE .)
    PLUS            reduce using rule 64 (value -> INTEGRAL_VALUE .)
    COMPARATOR      reduce using rule 64 (value -> INTEGRAL_VALUE .)
    RPAREN          reduce using rule 64 (value -> INTEGRAL_VALUE .)
    OR              reduce using rule 64 (value -> INTEGRAL_VALUE .)
    AND             reduce using rule 64 (value -> INTEGRAL_VALUE .)
    COMMA           reduce using rule 64 (value -> INTEGRAL_VALUE .)
    END             reduce using rule 64 (value -> INTEGRAL_VALUE .)


state 32

    (7) function -> ID LPAREN formal_params RPAREN COLON . return_type scope
    (58) return_type -> . ABYSS_TYPE
    (59) return_type -> . type
    (52) type -> . BOOL_TYPE
    (53) type -> . STRING_TYPE
    (54) type -> . CHAR_TYPE
    (55) type -> . FLOAT_TYPE
    (56) type -> . UNSIGNED_TYPE
    (57) type -> . SIGNED_TYPE
    ABYSS_TYPE      shift and go to state 46
    BOOL_TYPE       shift and go to state 14
    STRING_TYPE     shift and go to state 15
    CHAR_TYPE       shift and go to state 16
    FLOAT_TYPE      shift and go to state 17
    UNSIGNED_TYPE   shift and go to state 18
    SIGNED_TYPE     shift and go to state 19

    return_type                    shift and go to state 45
    type                           shift and go to state 47

state 33

    (9) formal_params -> var_name type multi_formal_params .
    RPAREN          reduce using rule 9 (formal_params -> var_name type multi_formal_params .)


state 34

    (11) multi_formal_params -> COMMA . var_name type multi_formal_params
    (2) var_name -> . array_name
    (3) var_name -> . ID
    (4) array_name -> . ID LSBRACKET arithmetic_layer RSBRACKET
    ID              shift and go to state 7

    var_name                       shift and go to state 48
    array_name                     shift and go to state 10

state 35

    (12) function_call -> ID LPAREN . actual_params RPAREN
    (13) actual_params -> .
    (14) actual_params -> . expression multi_actual_params
    (36) expression -> . comparison_layer
    (37) expression -> . expression OR comparison_layer
    (38) expression -> . expression AND comparison_layer
    (39) expression -> . ID LSBRACKET arithmetic_layer RSBRACKET
    (40) comparison_layer -> . arithmetic_layer
    (41) comparison_layer -> . comparison_layer COMPARATOR arithmetic_layer
    (42) arithmetic_layer -> . term
    (43) arithmetic_layer -> . arithmetic_layer MINUS term
    (44) arithmetic_layer -> . arithmetic_layer PLUS term
    (45) term -> . factor
    (46) term -> . term DIVISION factor
    (47) term -> . term MULTIPLICATION factor
    (48) factor -> . ID
    (49) factor -> . value
    (50) factor -> . LPAREN expression RPAREN
    (51) factor -> . function_call
    (60) value -> . STRING_VALUE
    (61) value -> . CHAR_VALUE
    (62) value -> . BOOL_VALUE
    (63) value -> . FLOAT_VALUE
    (64) value -> . INTEGRAL_VALUE
    (12) function_call -> . ID LPAREN actual_params RPAREN
    RPAREN          reduce using rule 13 (actual_params -> .)
    ID              shift and go to state 43
    LPAREN          shift and go to state 25
    STRING_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    FLOAT_VALUE     shift and go to state 30
    INTEGRAL_VALUE  shift and go to state 31

    actual_params                  shift and go to state 49
    expression                     shift and go to state 50
    comparison_layer               shift and go to state 42
    arithmetic_layer               shift and go to state 44
    term                           shift and go to state 22
    factor                         shift and go to state 23
    value                          shift and go to state 24
    function_call                  shift and go to state 26

state 36

    (4) array_name -> ID LSBRACKET arithmetic_layer RSBRACKET .
    BOOL_TYPE       reduce using rule 4 (array_name -> ID LSBRACKET arithmetic_layer RSBRACKET .)
    STRING_TYPE     reduce using rule 4 (array_name -> ID LSBRACKET arithmetic_layer RSBRACKET .)
    CHAR_TYPE       reduce using rule 4 (array_name -> ID LSBRACKET arithmetic_layer RSBRACKET .)
    FLOAT_TYPE      reduce using rule 4 (array_name -> ID LSBRACKET arithmetic_layer RSBRACKET .)
    UNSIGNED_TYPE   reduce using rule 4 (array_name -> ID LSBRACKET arithmetic_layer RSBRACKET .)
    SIGNED_TYPE     reduce using rule 4 (array_name -> ID LSBRACKET arithmetic_layer RSBRACKET .)


state 37

    (43) arithmetic_layer -> arithmetic_layer MINUS . term
    (45) term -> . factor
    (46) term -> . term DIVISION factor
    (47) term -> . term MULTIPLICATION factor
    (48) factor -> . ID
    (49) factor -> . value
    (50) factor -> . LPAREN expression RPAREN
    (51) factor -> . function_call
    (60) value -> . STRING_VALUE
    (61) value -> . CHAR_VALUE
    (62) value -> . BOOL_VALUE
    (63) value -> . FLOAT_VALUE
    (64) value -> . INTEGRAL_VALUE
    (12) function_call -> . ID LPAREN actual_params RPAREN
    ID              shift and go to state 20
    LPAREN          shift and go to state 25
    STRING_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    FLOAT_VALUE     shift and go to state 30
    INTEGRAL_VALUE  shift and go to state 31

    term                           shift and go to state 51
    factor                         shift and go to state 23
    value                          shift and go to state 24
    function_call                  shift and go to state 26

state 38

    (44) arithmetic_layer -> arithmetic_layer PLUS . term
    (45) term -> . factor
    (46) term -> . term DIVISION factor
    (47) term -> . term MULTIPLICATION factor
    (48) factor -> . ID
    (49) factor -> . value
    (50) factor -> . LPAREN expression RPAREN
    (51) factor -> . function_call
    (60) value -> . STRING_VALUE
    (61) value -> . CHAR_VALUE
    (62) value -> . BOOL_VALUE
    (63) value -> . FLOAT_VALUE
    (64) value -> . INTEGRAL_VALUE
    (12) function_call -> . ID LPAREN actual_params RPAREN
    ID              shift and go to state 20
    LPAREN          shift and go to state 25
    STRING_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    FLOAT_VALUE     shift and go to state 30
    INTEGRAL_VALUE  shift and go to state 31

    term                           shift and go to state 52
    factor                         shift and go to state 23
    value                          shift and go to state 24
    function_call                  shift and go to state 26

state 39

    (46) term -> term DIVISION . factor
    (48) factor -> . ID
    (49) factor -> . value
    (50) factor -> . LPAREN expression RPAREN
    (51) factor -> . function_call
    (60) value -> . STRING_VALUE
    (61) value -> . CHAR_VALUE
    (62) value -> . BOOL_VALUE
    (63) value -> . FLOAT_VALUE
    (64) value -> . INTEGRAL_VALUE
    (12) function_call -> . ID LPAREN actual_params RPAREN
    ID              shift and go to state 20
    LPAREN          shift and go to state 25
    STRING_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    FLOAT_VALUE     shift and go to state 30
    INTEGRAL_VALUE  shift and go to state 31

    factor                         shift and go to state 53
    value                          shift and go to state 24
    function_call                  shift and go to state 26

state 40

    (47) term -> term MULTIPLICATION . factor
    (48) factor -> . ID
    (49) factor -> . value
    (50) factor -> . LPAREN expression RPAREN
    (51) factor -> . function_call
    (60) value -> . STRING_VALUE
    (61) value -> . CHAR_VALUE
    (62) value -> . BOOL_VALUE
    (63) value -> . FLOAT_VALUE
    (64) value -> . INTEGRAL_VALUE
    (12) function_call -> . ID LPAREN actual_params RPAREN
    ID              shift and go to state 20
    LPAREN          shift and go to state 25
    STRING_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    FLOAT_VALUE     shift and go to state 30
    INTEGRAL_VALUE  shift and go to state 31

    factor                         shift and go to state 54
    value                          shift and go to state 24
    function_call                  shift and go to state 26

state 41

    (50) factor -> LPAREN expression . RPAREN
    (37) expression -> expression . OR comparison_layer
    (38) expression -> expression . AND comparison_layer
    RPAREN          shift and go to state 55
    OR              shift and go to state 56
    AND             shift and go to state 57


state 42

    (36) expression -> comparison_layer .
    (41) comparison_layer -> comparison_layer . COMPARATOR arithmetic_layer
    RPAREN          reduce using rule 36 (expression -> comparison_layer .)
    OR              reduce using rule 36 (expression -> comparison_layer .)
    AND             reduce using rule 36 (expression -> comparison_layer .)
    COMMA           reduce using rule 36 (expression -> comparison_layer .)
    END             reduce using rule 36 (expression -> comparison_layer .)
    COMPARATOR      shift and go to state 58


state 43

    (39) expression -> ID . LSBRACKET arithmetic_layer RSBRACKET
    (48) factor -> ID .
    (12) function_call -> ID . LPAREN actual_params RPAREN
    LSBRACKET       shift and go to state 59
    DIVISION        reduce using rule 48 (factor -> ID .)
    MULTIPLICATION  reduce using rule 48 (factor -> ID .)
    MINUS           reduce using rule 48 (factor -> ID .)
    PLUS            reduce using rule 48 (factor -> ID .)
    COMPARATOR      reduce using rule 48 (factor -> ID .)
    RPAREN          reduce using rule 48 (factor -> ID .)
    OR              reduce using rule 48 (factor -> ID .)
    AND             reduce using rule 48 (factor -> ID .)
    COMMA           reduce using rule 48 (factor -> ID .)
    END             reduce using rule 48 (factor -> ID .)
    LPAREN          shift and go to state 35


state 44

    (40) comparison_layer -> arithmetic_layer .
    (43) arithmetic_layer -> arithmetic_layer . MINUS term
    (44) arithmetic_layer -> arithmetic_layer . PLUS term
    COMPARATOR      reduce using rule 40 (comparison_layer -> arithmetic_layer .)
    RPAREN          reduce using rule 40 (comparison_layer -> arithmetic_layer .)
    OR              reduce using rule 40 (comparison_layer -> arithmetic_layer .)
    AND             reduce using rule 40 (comparison_layer -> arithmetic_layer .)
    COMMA           reduce using rule 40 (comparison_layer -> arithmetic_layer .)
    END             reduce using rule 40 (comparison_layer -> arithmetic_layer .)
    MINUS           shift and go to state 37
    PLUS            shift and go to state 38


state 45

    (7) function -> ID LPAREN formal_params RPAREN COLON return_type . scope
    (65) scope -> . LBRACE new_scope statements pop_scope RBRACE
    LBRACE          shift and go to state 61

    scope                          shift and go to state 60

state 46

    (58) return_type -> ABYSS_TYPE .
    LBRACE          reduce using rule 58 (return_type -> ABYSS_TYPE .)


state 47

    (59) return_type -> type .
    LBRACE          reduce using rule 59 (return_type -> type .)


state 48

    (11) multi_formal_params -> COMMA var_name . type multi_formal_params
    (52) type -> . BOOL_TYPE
    (53) type -> . STRING_TYPE
    (54) type -> . CHAR_TYPE
    (55) type -> . FLOAT_TYPE
    (56) type -> . UNSIGNED_TYPE
    (57) type -> . SIGNED_TYPE
    BOOL_TYPE       shift and go to state 14
    STRING_TYPE     shift and go to state 15
    CHAR_TYPE       shift and go to state 16
    FLOAT_TYPE      shift and go to state 17
    UNSIGNED_TYPE   shift and go to state 18
    SIGNED_TYPE     shift and go to state 19

    type                           shift and go to state 62

state 49

    (12) function_call -> ID LPAREN actual_params . RPAREN
    RPAREN          shift and go to state 63


state 50

    (14) actual_params -> expression . multi_actual_params
    (37) expression -> expression . OR comparison_layer
    (38) expression -> expression . AND comparison_layer
    (15) multi_actual_params -> .
    (16) multi_actual_params -> . COMMA expression multi_actual_params
    OR              shift and go to state 56
    AND             shift and go to state 57
    RPAREN          reduce using rule 15 (multi_actual_params -> .)
    COMMA           shift and go to state 65

    multi_actual_params            shift and go to state 64

state 51

    (43) arithmetic_layer -> arithmetic_layer MINUS term .
    (46) term -> term . DIVISION factor
    (47) term -> term . MULTIPLICATION factor
    RSBRACKET       reduce using rule 43 (arithmetic_layer -> arithmetic_layer MINUS term .)
    MINUS           reduce using rule 43 (arithmetic_layer -> arithmetic_layer MINUS term .)
    PLUS            reduce using rule 43 (arithmetic_layer -> arithmetic_layer MINUS term .)
    COMPARATOR      reduce using rule 43 (arithmetic_layer -> arithmetic_layer MINUS term .)
    RPAREN          reduce using rule 43 (arithmetic_layer -> arithmetic_layer MINUS term .)
    OR              reduce using rule 43 (arithmetic_layer -> arithmetic_layer MINUS term .)
    AND             reduce using rule 43 (arithmetic_layer -> arithmetic_layer MINUS term .)
    COMMA           reduce using rule 43 (arithmetic_layer -> arithmetic_layer MINUS term .)
    END             reduce using rule 43 (arithmetic_layer -> arithmetic_layer MINUS term .)
    DIVISION        shift and go to state 39
    MULTIPLICATION  shift and go to state 40


state 52

    (44) arithmetic_layer -> arithmetic_layer PLUS term .
    (46) term -> term . DIVISION factor
    (47) term -> term . MULTIPLICATION factor
    RSBRACKET       reduce using rule 44 (arithmetic_layer -> arithmetic_layer PLUS term .)
    MINUS           reduce using rule 44 (arithmetic_layer -> arithmetic_layer PLUS term .)
    PLUS            reduce using rule 44 (arithmetic_layer -> arithmetic_layer PLUS term .)
    COMPARATOR      reduce using rule 44 (arithmetic_layer -> arithmetic_layer PLUS term .)
    RPAREN          reduce using rule 44 (arithmetic_layer -> arithmetic_layer PLUS term .)
    OR              reduce using rule 44 (arithmetic_layer -> arithmetic_layer PLUS term .)
    AND             reduce using rule 44 (arithmetic_layer -> arithmetic_layer PLUS term .)
    COMMA           reduce using rule 44 (arithmetic_layer -> arithmetic_layer PLUS term .)
    END             reduce using rule 44 (arithmetic_layer -> arithmetic_layer PLUS term .)
    DIVISION        shift and go to state 39
    MULTIPLICATION  shift and go to state 40


state 53

    (46) term -> term DIVISION factor .
    DIVISION        reduce using rule 46 (term -> term DIVISION factor .)
    MULTIPLICATION  reduce using rule 46 (term -> term DIVISION factor .)
    RSBRACKET       reduce using rule 46 (term -> term DIVISION factor .)
    MINUS           reduce using rule 46 (term -> term DIVISION factor .)
    PLUS            reduce using rule 46 (term -> term DIVISION factor .)
    COMPARATOR      reduce using rule 46 (term -> term DIVISION factor .)
    RPAREN          reduce using rule 46 (term -> term DIVISION factor .)
    OR              reduce using rule 46 (term -> term DIVISION factor .)
    AND             reduce using rule 46 (term -> term DIVISION factor .)
    COMMA           reduce using rule 46 (term -> term DIVISION factor .)
    END             reduce using rule 46 (term -> term DIVISION factor .)


state 54

    (47) term -> term MULTIPLICATION factor .
    DIVISION        reduce using rule 47 (term -> term MULTIPLICATION factor .)
    MULTIPLICATION  reduce using rule 47 (term -> term MULTIPLICATION factor .)
    RSBRACKET       reduce using rule 47 (term -> term MULTIPLICATION factor .)
    MINUS           reduce using rule 47 (term -> term MULTIPLICATION factor .)
    PLUS            reduce using rule 47 (term -> term MULTIPLICATION factor .)
    COMPARATOR      reduce using rule 47 (term -> term MULTIPLICATION factor .)
    RPAREN          reduce using rule 47 (term -> term MULTIPLICATION factor .)
    OR              reduce using rule 47 (term -> term MULTIPLICATION factor .)
    AND             reduce using rule 47 (term -> term MULTIPLICATION factor .)
    COMMA           reduce using rule 47 (term -> term MULTIPLICATION factor .)
    END             reduce using rule 47 (term -> term MULTIPLICATION factor .)


state 55

    (50) factor -> LPAREN expression RPAREN .
    DIVISION        reduce using rule 50 (factor -> LPAREN expression RPAREN .)
    MULTIPLICATION  reduce using rule 50 (factor -> LPAREN expression RPAREN .)
    RSBRACKET       reduce using rule 50 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 50 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 50 (factor -> LPAREN expression RPAREN .)
    COMPARATOR      reduce using rule 50 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 50 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 50 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 50 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 50 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 50 (factor -> LPAREN expression RPAREN .)


state 56

    (37) expression -> expression OR . comparison_layer
    (40) comparison_layer -> . arithmetic_layer
    (41) comparison_layer -> . comparison_layer COMPARATOR arithmetic_layer
    (42) arithmetic_layer -> . term
    (43) arithmetic_layer -> . arithmetic_layer MINUS term
    (44) arithmetic_layer -> . arithmetic_layer PLUS term
    (45) term -> . factor
    (46) term -> . term DIVISION factor
    (47) term -> . term MULTIPLICATION factor
    (48) factor -> . ID
    (49) factor -> . value
    (50) factor -> . LPAREN expression RPAREN
    (51) factor -> . function_call
    (60) value -> . STRING_VALUE
    (61) value -> . CHAR_VALUE
    (62) value -> . BOOL_VALUE
    (63) value -> . FLOAT_VALUE
    (64) value -> . INTEGRAL_VALUE
    (12) function_call -> . ID LPAREN actual_params RPAREN
    ID              shift and go to state 20
    LPAREN          shift and go to state 25
    STRING_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    FLOAT_VALUE     shift and go to state 30
    INTEGRAL_VALUE  shift and go to state 31

    comparison_layer               shift and go to state 66
    arithmetic_layer               shift and go to state 44
    term                           shift and go to state 22
    factor                         shift and go to state 23
    value                          shift and go to state 24
    function_call                  shift and go to state 26

state 57

    (38) expression -> expression AND . comparison_layer
    (40) comparison_layer -> . arithmetic_layer
    (41) comparison_layer -> . comparison_layer COMPARATOR arithmetic_layer
    (42) arithmetic_layer -> . term
    (43) arithmetic_layer -> . arithmetic_layer MINUS term
    (44) arithmetic_layer -> . arithmetic_layer PLUS term
    (45) term -> . factor
    (46) term -> . term DIVISION factor
    (47) term -> . term MULTIPLICATION factor
    (48) factor -> . ID
    (49) factor -> . value
    (50) factor -> . LPAREN expression RPAREN
    (51) factor -> . function_call
    (60) value -> . STRING_VALUE
    (61) value -> . CHAR_VALUE
    (62) value -> . BOOL_VALUE
    (63) value -> . FLOAT_VALUE
    (64) value -> . INTEGRAL_VALUE
    (12) function_call -> . ID LPAREN actual_params RPAREN
    ID              shift and go to state 20
    LPAREN          shift and go to state 25
    STRING_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    FLOAT_VALUE     shift and go to state 30
    INTEGRAL_VALUE  shift and go to state 31

    comparison_layer               shift and go to state 67
    arithmetic_layer               shift and go to state 44
    term                           shift and go to state 22
    factor                         shift and go to state 23
    value                          shift and go to state 24
    function_call                  shift and go to state 26

state 58

    (41) comparison_layer -> comparison_layer COMPARATOR . arithmetic_layer
    (42) arithmetic_layer -> . term
    (43) arithmetic_layer -> . arithmetic_layer MINUS term
    (44) arithmetic_layer -> . arithmetic_layer PLUS term
    (45) term -> . factor
    (46) term -> . term DIVISION factor
    (47) term -> . term MULTIPLICATION factor
    (48) factor -> . ID
    (49) factor -> . value
    (50) factor -> . LPAREN expression RPAREN
    (51) factor -> . function_call
    (60) value -> . STRING_VALUE
    (61) value -> . CHAR_VALUE
    (62) value -> . BOOL_VALUE
    (63) value -> . FLOAT_VALUE
    (64) value -> . INTEGRAL_VALUE
    (12) function_call -> . ID LPAREN actual_params RPAREN
    ID              shift and go to state 20
    LPAREN          shift and go to state 25
    STRING_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    FLOAT_VALUE     shift and go to state 30
    INTEGRAL_VALUE  shift and go to state 31

    arithmetic_layer               shift and go to state 68
    term                           shift and go to state 22
    factor                         shift and go to state 23
    value                          shift and go to state 24
    function_call                  shift and go to state 26

state 59

    (39) expression -> ID LSBRACKET . arithmetic_layer RSBRACKET
    (42) arithmetic_layer -> . term
    (43) arithmetic_layer -> . arithmetic_layer MINUS term
    (44) arithmetic_layer -> . arithmetic_layer PLUS term
    (45) term -> . factor
    (46) term -> . term DIVISION factor
    (47) term -> . term MULTIPLICATION factor
    (48) factor -> . ID
    (49) factor -> . value
    (50) factor -> . LPAREN expression RPAREN
    (51) factor -> . function_call
    (60) value -> . STRING_VALUE
    (61) value -> . CHAR_VALUE
    (62) value -> . BOOL_VALUE
    (63) value -> . FLOAT_VALUE
    (64) value -> . INTEGRAL_VALUE
    (12) function_call -> . ID LPAREN actual_params RPAREN
    ID              shift and go to state 20
    LPAREN          shift and go to state 25
    STRING_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    FLOAT_VALUE     shift and go to state 30
    INTEGRAL_VALUE  shift and go to state 31

    arithmetic_layer               shift and go to state 69
    term                           shift and go to state 22
    factor                         shift and go to state 23
    value                          shift and go to state 24
    function_call                  shift and go to state 26

state 60

    (7) function -> ID LPAREN formal_params RPAREN COLON return_type scope .
    ID              reduce using rule 7 (function -> ID LPAREN formal_params RPAREN COLON return_type scope .)
    $end            reduce using rule 7 (function -> ID LPAREN formal_params RPAREN COLON return_type scope .)


state 61

    (65) scope -> LBRACE . new_scope statements pop_scope RBRACE
    (66) new_scope -> .
    END             reduce using rule 66 (new_scope -> .)
    IF              reduce using rule 66 (new_scope -> .)
    WHILE           reduce using rule 66 (new_scope -> .)
    LBRACE          reduce using rule 66 (new_scope -> .)
    ID              reduce using rule 66 (new_scope -> .)
    LPAREN          reduce using rule 66 (new_scope -> .)
    STRING_VALUE    reduce using rule 66 (new_scope -> .)
    CHAR_VALUE      reduce using rule 66 (new_scope -> .)
    BOOL_VALUE      reduce using rule 66 (new_scope -> .)
    FLOAT_VALUE     reduce using rule 66 (new_scope -> .)
    INTEGRAL_VALUE  reduce using rule 66 (new_scope -> .)
    RBRACE          reduce using rule 66 (new_scope -> .)

    new_scope                      shift and go to state 70

state 62

    (11) multi_formal_params -> COMMA var_name type . multi_formal_params
    (10) multi_formal_params -> .
    (11) multi_formal_params -> . COMMA var_name type multi_formal_params
    RPAREN          reduce using rule 10 (multi_formal_params -> .)
    COMMA           shift and go to state 34

    multi_formal_params            shift and go to state 71

state 63

    (12) function_call -> ID LPAREN actual_params RPAREN .
    DIVISION        reduce using rule 12 (function_call -> ID LPAREN actual_params RPAREN .)
    MULTIPLICATION  reduce using rule 12 (function_call -> ID LPAREN actual_params RPAREN .)
    RSBRACKET       reduce using rule 12 (function_call -> ID LPAREN actual_params RPAREN .)
    MINUS           reduce using rule 12 (function_call -> ID LPAREN actual_params RPAREN .)
    PLUS            reduce using rule 12 (function_call -> ID LPAREN actual_params RPAREN .)
    COMPARATOR      reduce using rule 12 (function_call -> ID LPAREN actual_params RPAREN .)
    RPAREN          reduce using rule 12 (function_call -> ID LPAREN actual_params RPAREN .)
    OR              reduce using rule 12 (function_call -> ID LPAREN actual_params RPAREN .)
    AND             reduce using rule 12 (function_call -> ID LPAREN actual_params RPAREN .)
    COMMA           reduce using rule 12 (function_call -> ID LPAREN actual_params RPAREN .)
    END             reduce using rule 12 (function_call -> ID LPAREN actual_params RPAREN .)


state 64

    (14) actual_params -> expression multi_actual_params .
    RPAREN          reduce using rule 14 (actual_params -> expression multi_actual_params .)


state 65

    (16) multi_actual_params -> COMMA . expression multi_actual_params
    (36) expression -> . comparison_layer
    (37) expression -> . expression OR comparison_layer
    (38) expression -> . expression AND comparison_layer
    (39) expression -> . ID LSBRACKET arithmetic_layer RSBRACKET
    (40) comparison_layer -> . arithmetic_layer
    (41) comparison_layer -> . comparison_layer COMPARATOR arithmetic_layer
    (42) arithmetic_layer -> . term
    (43) arithmetic_layer -> . arithmetic_layer MINUS term
    (44) arithmetic_layer -> . arithmetic_layer PLUS term
    (45) term -> . factor
    (46) term -> . term DIVISION factor
    (47) term -> . term MULTIPLICATION factor
    (48) factor -> . ID
    (49) factor -> . value
    (50) factor -> . LPAREN expression RPAREN
    (51) factor -> . function_call
    (60) value -> . STRING_VALUE
    (61) value -> . CHAR_VALUE
    (62) value -> . BOOL_VALUE
    (63) value -> . FLOAT_VALUE
    (64) value -> . INTEGRAL_VALUE
    (12) function_call -> . ID LPAREN actual_params RPAREN
    ID              shift and go to state 43
    LPAREN          shift and go to state 25
    STRING_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    FLOAT_VALUE     shift and go to state 30
    INTEGRAL_VALUE  shift and go to state 31

    expression                     shift and go to state 72
    comparison_layer               shift and go to state 42
    arithmetic_layer               shift and go to state 44
    term                           shift and go to state 22
    factor                         shift and go to state 23
    value                          shift and go to state 24
    function_call                  shift and go to state 26

state 66

    (37) expression -> expression OR comparison_layer .
    (41) comparison_layer -> comparison_layer . COMPARATOR arithmetic_layer
    RPAREN          reduce using rule 37 (expression -> expression OR comparison_layer .)
    OR              reduce using rule 37 (expression -> expression OR comparison_layer .)
    AND             reduce using rule 37 (expression -> expression OR comparison_layer .)
    COMMA           reduce using rule 37 (expression -> expression OR comparison_layer .)
    END             reduce using rule 37 (expression -> expression OR comparison_layer .)
    COMPARATOR      shift and go to state 58


state 67

    (38) expression -> expression AND comparison_layer .
    (41) comparison_layer -> comparison_layer . COMPARATOR arithmetic_layer
    RPAREN          reduce using rule 38 (expression -> expression AND comparison_layer .)
    OR              reduce using rule 38 (expression -> expression AND comparison_layer .)
    AND             reduce using rule 38 (expression -> expression AND comparison_layer .)
    COMMA           reduce using rule 38 (expression -> expression AND comparison_layer .)
    END             reduce using rule 38 (expression -> expression AND comparison_layer .)
    COMPARATOR      shift and go to state 58


state 68

    (41) comparison_layer -> comparison_layer COMPARATOR arithmetic_layer .
    (43) arithmetic_layer -> arithmetic_layer . MINUS term
    (44) arithmetic_layer -> arithmetic_layer . PLUS term
    COMPARATOR      reduce using rule 41 (comparison_layer -> comparison_layer COMPARATOR arithmetic_layer .)
    RPAREN          reduce using rule 41 (comparison_layer -> comparison_layer COMPARATOR arithmetic_layer .)
    OR              reduce using rule 41 (comparison_layer -> comparison_layer COMPARATOR arithmetic_layer .)
    AND             reduce using rule 41 (comparison_layer -> comparison_layer COMPARATOR arithmetic_layer .)
    COMMA           reduce using rule 41 (comparison_layer -> comparison_layer COMPARATOR arithmetic_layer .)
    END             reduce using rule 41 (comparison_layer -> comparison_layer COMPARATOR arithmetic_layer .)
    MINUS           shift and go to state 37
    PLUS            shift and go to state 38


state 69

    (39) expression -> ID LSBRACKET arithmetic_layer . RSBRACKET
    (43) arithmetic_layer -> arithmetic_layer . MINUS term
    (44) arithmetic_layer -> arithmetic_layer . PLUS term
    RSBRACKET       shift and go to state 73
    MINUS           shift and go to state 37
    PLUS            shift and go to state 38


state 70

    (65) scope -> LBRACE new_scope . statements pop_scope RBRACE
    (17) statements -> .
    (18) statements -> . statement statements
    (19) statement -> . END
    (20) statement -> . if_statement
    (21) statement -> . while_statement
    (22) statement -> . scope
    (23) statement -> . assignment END
    (24) statement -> . declaration_init END
    (25) statement -> . declaration END
    (26) statement -> . expression END
    (28) if_statement -> . IF LPAREN expression RPAREN scope else_statement
    (27) while_statement -> . WHILE LPAREN expression RPAREN scope
    (65) scope -> . LBRACE new_scope statements pop_scope RBRACE
    (34) assignment -> . ID LSBRACKET arithmetic_layer RSBRACKET ASSIGN expression
    (35) assignment -> . ID ASSIGN expression
    (33) declaration_init -> . var_name COLON type ASSIGN expression
    (32) declaration -> . var_name COLON type
    (36) expression -> . comparison_layer
    (37) expression -> . expression OR comparison_layer
    (38) expression -> . expression AND comparison_layer
    (39) expression -> . ID LSBRACKET arithmetic_layer RSBRACKET
    (2) var_name -> . array_name
    (3) var_name -> . ID
    (40) comparison_layer -> . arithmetic_layer
    (41) comparison_layer -> . comparison_layer COMPARATOR arithmetic_layer
    (4) array_name -> . ID LSBRACKET arithmetic_layer RSBRACKET
    (42) arithmetic_layer -> . term
    (43) arithmetic_layer -> . arithmetic_layer MINUS term
    (44) arithmetic_layer -> . arithmetic_layer PLUS term
    (45) term -> . factor
    (46) term -> . term DIVISION factor
    (47) term -> . term MULTIPLICATION factor
    (48) factor -> . ID
    (49) factor -> . value
    (50) factor -> . LPAREN expression RPAREN
    (51) factor -> . function_call
    (60) value -> . STRING_VALUE
    (61) value -> . CHAR_VALUE
    (62) value -> . BOOL_VALUE
    (63) value -> . FLOAT_VALUE
    (64) value -> . INTEGRAL_VALUE
    (12) function_call -> . ID LPAREN actual_params RPAREN
    RBRACE          reduce using rule 17 (statements -> .)
    END             shift and go to state 76
    IF              shift and go to state 84
    WHILE           shift and go to state 85
    LBRACE          shift and go to state 61
    ID              shift and go to state 86
    LPAREN          shift and go to state 25
    STRING_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    FLOAT_VALUE     shift and go to state 30
    INTEGRAL_VALUE  shift and go to state 31

    statements                     shift and go to state 74
    statement                      shift and go to state 75
    if_statement                   shift and go to state 77
    while_statement                shift and go to state 78
    scope                          shift and go to state 79
    assignment                     shift and go to state 80
    declaration_init               shift and go to state 81
    declaration                    shift and go to state 82
    expression                     shift and go to state 83
    arithmetic_layer               shift and go to state 44
    var_name                       shift and go to state 87
    comparison_layer               shift and go to state 42
    array_name                     shift and go to state 10
    term                           shift and go to state 22
    factor                         shift and go to state 23
    value                          shift and go to state 24
    function_call                  shift and go to state 26

state 71

    (11) multi_formal_params -> COMMA var_name type multi_formal_params .
    RPAREN          reduce using rule 11 (multi_formal_params -> COMMA var_name type multi_formal_params .)


state 72

    (16) multi_actual_params -> COMMA expression . multi_actual_params
    (37) expression -> expression . OR comparison_layer
    (38) expression -> expression . AND comparison_layer
    (15) multi_actual_params -> .
    (16) multi_actual_params -> . COMMA expression multi_actual_params
    OR              shift and go to state 56
    AND             shift and go to state 57
    RPAREN          reduce using rule 15 (multi_actual_params -> .)
    COMMA           shift and go to state 65

    multi_actual_params            shift and go to state 88

state 73

    (39) expression -> ID LSBRACKET arithmetic_layer RSBRACKET .
    RPAREN          reduce using rule 39 (expression -> ID LSBRACKET arithmetic_layer RSBRACKET .)
    OR              reduce using rule 39 (expression -> ID LSBRACKET arithmetic_layer RSBRACKET .)
    AND             reduce using rule 39 (expression -> ID LSBRACKET arithmetic_layer RSBRACKET .)
    COMMA           reduce using rule 39 (expression -> ID LSBRACKET arithmetic_layer RSBRACKET .)
    END             reduce using rule 39 (expression -> ID LSBRACKET arithmetic_layer RSBRACKET .)


state 74

    (65) scope -> LBRACE new_scope statements . pop_scope RBRACE
    (67) pop_scope -> .
    RBRACE          reduce using rule 67 (pop_scope -> .)

    pop_scope                      shift and go to state 89

state 75

    (18) statements -> statement . statements
    (17) statements -> .
    (18) statements -> . statement statements
    (19) statement -> . END
    (20) statement -> . if_statement
    (21) statement -> . while_statement
    (22) statement -> . scope
    (23) statement -> . assignment END
    (24) statement -> . declaration_init END
    (25) statement -> . declaration END
    (26) statement -> . expression END
    (28) if_statement -> . IF LPAREN expression RPAREN scope else_statement
    (27) while_statement -> . WHILE LPAREN expression RPAREN scope
    (65) scope -> . LBRACE new_scope statements pop_scope RBRACE
    (34) assignment -> . ID LSBRACKET arithmetic_layer RSBRACKET ASSIGN expression
    (35) assignment -> . ID ASSIGN expression
    (33) declaration_init -> . var_name COLON type ASSIGN expression
    (32) declaration -> . var_name COLON type
    (36) expression -> . comparison_layer
    (37) expression -> . expression OR comparison_layer
    (38) expression -> . expression AND comparison_layer
    (39) expression -> . ID LSBRACKET arithmetic_layer RSBRACKET
    (2) var_name -> . array_name
    (3) var_name -> . ID
    (40) comparison_layer -> . arithmetic_layer
    (41) comparison_layer -> . comparison_layer COMPARATOR arithmetic_layer
    (4) array_name -> . ID LSBRACKET arithmetic_layer RSBRACKET
    (42) arithmetic_layer -> . term
    (43) arithmetic_layer -> . arithmetic_layer MINUS term
    (44) arithmetic_layer -> . arithmetic_layer PLUS term
    (45) term -> . factor
    (46) term -> . term DIVISION factor
    (47) term -> . term MULTIPLICATION factor
    (48) factor -> . ID
    (49) factor -> . value
    (50) factor -> . LPAREN expression RPAREN
    (51) factor -> . function_call
    (60) value -> . STRING_VALUE
    (61) value -> . CHAR_VALUE
    (62) value -> . BOOL_VALUE
    (63) value -> . FLOAT_VALUE
    (64) value -> . INTEGRAL_VALUE
    (12) function_call -> . ID LPAREN actual_params RPAREN
    RBRACE          reduce using rule 17 (statements -> .)
    END             shift and go to state 76
    IF              shift and go to state 84
    WHILE           shift and go to state 85
    LBRACE          shift and go to state 61
    ID              shift and go to state 86
    LPAREN          shift and go to state 25
    STRING_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    FLOAT_VALUE     shift and go to state 30
    INTEGRAL_VALUE  shift and go to state 31

    statement                      shift and go to state 75
    statements                     shift and go to state 90
    if_statement                   shift and go to state 77
    while_statement                shift and go to state 78
    scope                          shift and go to state 79
    assignment                     shift and go to state 80
    declaration_init               shift and go to state 81
    declaration                    shift and go to state 82
    expression                     shift and go to state 83
    arithmetic_layer               shift and go to state 44
    var_name                       shift and go to state 87
    comparison_layer               shift and go to state 42
    array_name                     shift and go to state 10
    term                           shift and go to state 22
    factor                         shift and go to state 23
    value                          shift and go to state 24
    function_call                  shift and go to state 26

state 76

    (19) statement -> END .
    END             reduce using rule 19 (statement -> END .)
    IF              reduce using rule 19 (statement -> END .)
    WHILE           reduce using rule 19 (statement -> END .)
    LBRACE          reduce using rule 19 (statement -> END .)
    ID              reduce using rule 19 (statement -> END .)
    LPAREN          reduce using rule 19 (statement -> END .)
    STRING_VALUE    reduce using rule 19 (statement -> END .)
    CHAR_VALUE      reduce using rule 19 (statement -> END .)
    BOOL_VALUE      reduce using rule 19 (statement -> END .)
    FLOAT_VALUE     reduce using rule 19 (statement -> END .)
    INTEGRAL_VALUE  reduce using rule 19 (statement -> END .)
    RBRACE          reduce using rule 19 (statement -> END .)


state 77

    (20) statement -> if_statement .
    END             reduce using rule 20 (statement -> if_statement .)
    IF              reduce using rule 20 (statement -> if_statement .)
    WHILE           reduce using rule 20 (statement -> if_statement .)
    LBRACE          reduce using rule 20 (statement -> if_statement .)
    ID              reduce using rule 20 (statement -> if_statement .)
    LPAREN          reduce using rule 20 (statement -> if_statement .)
    STRING_VALUE    reduce using rule 20 (statement -> if_statement .)
    CHAR_VALUE      reduce using rule 20 (statement -> if_statement .)
    BOOL_VALUE      reduce using rule 20 (statement -> if_statement .)
    FLOAT_VALUE     reduce using rule 20 (statement -> if_statement .)
    INTEGRAL_VALUE  reduce using rule 20 (statement -> if_statement .)
    RBRACE          reduce using rule 20 (statement -> if_statement .)


state 78

    (21) statement -> while_statement .
    END             reduce using rule 21 (statement -> while_statement .)
    IF              reduce using rule 21 (statement -> while_statement .)
    WHILE           reduce using rule 21 (statement -> while_statement .)
    LBRACE          reduce using rule 21 (statement -> while_statement .)
    ID              reduce using rule 21 (statement -> while_statement .)
    LPAREN          reduce using rule 21 (statement -> while_statement .)
    STRING_VALUE    reduce using rule 21 (statement -> while_statement .)
    CHAR_VALUE      reduce using rule 21 (statement -> while_statement .)
    BOOL_VALUE      reduce using rule 21 (statement -> while_statement .)
    FLOAT_VALUE     reduce using rule 21 (statement -> while_statement .)
    INTEGRAL_VALUE  reduce using rule 21 (statement -> while_statement .)
    RBRACE          reduce using rule 21 (statement -> while_statement .)


state 79

    (22) statement -> scope .
    END             reduce using rule 22 (statement -> scope .)
    IF              reduce using rule 22 (statement -> scope .)
    WHILE           reduce using rule 22 (statement -> scope .)
    LBRACE          reduce using rule 22 (statement -> scope .)
    ID              reduce using rule 22 (statement -> scope .)
    LPAREN          reduce using rule 22 (statement -> scope .)
    STRING_VALUE    reduce using rule 22 (statement -> scope .)
    CHAR_VALUE      reduce using rule 22 (statement -> scope .)
    BOOL_VALUE      reduce using rule 22 (statement -> scope .)
    FLOAT_VALUE     reduce using rule 22 (statement -> scope .)
    INTEGRAL_VALUE  reduce using rule 22 (statement -> scope .)
    RBRACE          reduce using rule 22 (statement -> scope .)


state 80

    (23) statement -> assignment . END
    END             shift and go to state 91


state 81

    (24) statement -> declaration_init . END
    END             shift and go to state 92


state 82

    (25) statement -> declaration . END
    END             shift and go to state 93


state 83

    (26) statement -> expression . END
    (37) expression -> expression . OR comparison_layer
    (38) expression -> expression . AND comparison_layer
    END             shift and go to state 94
    OR              shift and go to state 56
    AND             shift and go to state 57


state 84

    (28) if_statement -> IF . LPAREN expression RPAREN scope else_statement
    LPAREN          shift and go to state 95


state 85

    (27) while_statement -> WHILE . LPAREN expression RPAREN scope
    LPAREN          shift and go to state 96


state 86

    (34) assignment -> ID . LSBRACKET arithmetic_layer RSBRACKET ASSIGN expression
    (35) assignment -> ID . ASSIGN expression
    (39) expression -> ID . LSBRACKET arithmetic_layer RSBRACKET
    (3) var_name -> ID .
    (4) array_name -> ID . LSBRACKET arithmetic_layer RSBRACKET
    (48) factor -> ID .
    (12) function_call -> ID . LPAREN actual_params RPAREN
    LSBRACKET       shift and go to state 97
    ASSIGN          shift and go to state 98
    COLON           reduce using rule 3 (var_name -> ID .)
    DIVISION        reduce using rule 48 (factor -> ID .)
    MULTIPLICATION  reduce using rule 48 (factor -> ID .)
    MINUS           reduce using rule 48 (factor -> ID .)
    PLUS            reduce using rule 48 (factor -> ID .)
    COMPARATOR      reduce using rule 48 (factor -> ID .)
    END             reduce using rule 48 (factor -> ID .)
    OR              reduce using rule 48 (factor -> ID .)
    AND             reduce using rule 48 (factor -> ID .)
    LPAREN          shift and go to state 35


state 87

    (33) declaration_init -> var_name . COLON type ASSIGN expression
    (32) declaration -> var_name . COLON type
    COLON           shift and go to state 99


state 88

    (16) multi_actual_params -> COMMA expression multi_actual_params .
    RPAREN          reduce using rule 16 (multi_actual_params -> COMMA expression multi_actual_params .)


state 89

    (65) scope -> LBRACE new_scope statements pop_scope . RBRACE
    RBRACE          shift and go to state 100


state 90

    (18) statements -> statement statements .
    RBRACE          reduce using rule 18 (statements -> statement statements .)


state 91

    (23) statement -> assignment END .
    END             reduce using rule 23 (statement -> assignment END .)
    IF              reduce using rule 23 (statement -> assignment END .)
    WHILE           reduce using rule 23 (statement -> assignment END .)
    LBRACE          reduce using rule 23 (statement -> assignment END .)
    ID              reduce using rule 23 (statement -> assignment END .)
    LPAREN          reduce using rule 23 (statement -> assignment END .)
    STRING_VALUE    reduce using rule 23 (statement -> assignment END .)
    CHAR_VALUE      reduce using rule 23 (statement -> assignment END .)
    BOOL_VALUE      reduce using rule 23 (statement -> assignment END .)
    FLOAT_VALUE     reduce using rule 23 (statement -> assignment END .)
    INTEGRAL_VALUE  reduce using rule 23 (statement -> assignment END .)
    RBRACE          reduce using rule 23 (statement -> assignment END .)


state 92

    (24) statement -> declaration_init END .
    END             reduce using rule 24 (statement -> declaration_init END .)
    IF              reduce using rule 24 (statement -> declaration_init END .)
    WHILE           reduce using rule 24 (statement -> declaration_init END .)
    LBRACE          reduce using rule 24 (statement -> declaration_init END .)
    ID              reduce using rule 24 (statement -> declaration_init END .)
    LPAREN          reduce using rule 24 (statement -> declaration_init END .)
    STRING_VALUE    reduce using rule 24 (statement -> declaration_init END .)
    CHAR_VALUE      reduce using rule 24 (statement -> declaration_init END .)
    BOOL_VALUE      reduce using rule 24 (statement -> declaration_init END .)
    FLOAT_VALUE     reduce using rule 24 (statement -> declaration_init END .)
    INTEGRAL_VALUE  reduce using rule 24 (statement -> declaration_init END .)
    RBRACE          reduce using rule 24 (statement -> declaration_init END .)


state 93

    (25) statement -> declaration END .
    END             reduce using rule 25 (statement -> declaration END .)
    IF              reduce using rule 25 (statement -> declaration END .)
    WHILE           reduce using rule 25 (statement -> declaration END .)
    LBRACE          reduce using rule 25 (statement -> declaration END .)
    ID              reduce using rule 25 (statement -> declaration END .)
    LPAREN          reduce using rule 25 (statement -> declaration END .)
    STRING_VALUE    reduce using rule 25 (statement -> declaration END .)
    CHAR_VALUE      reduce using rule 25 (statement -> declaration END .)
    BOOL_VALUE      reduce using rule 25 (statement -> declaration END .)
    FLOAT_VALUE     reduce using rule 25 (statement -> declaration END .)
    INTEGRAL_VALUE  reduce using rule 25 (statement -> declaration END .)
    RBRACE          reduce using rule 25 (statement -> declaration END .)


state 94

    (26) statement -> expression END .
    END             reduce using rule 26 (statement -> expression END .)
    IF              reduce using rule 26 (statement -> expression END .)
    WHILE           reduce using rule 26 (statement -> expression END .)
    LBRACE          reduce using rule 26 (statement -> expression END .)
    ID              reduce using rule 26 (statement -> expression END .)
    LPAREN          reduce using rule 26 (statement -> expression END .)
    STRING_VALUE    reduce using rule 26 (statement -> expression END .)
    CHAR_VALUE      reduce using rule 26 (statement -> expression END .)
    BOOL_VALUE      reduce using rule 26 (statement -> expression END .)
    FLOAT_VALUE     reduce using rule 26 (statement -> expression END .)
    INTEGRAL_VALUE  reduce using rule 26 (statement -> expression END .)
    RBRACE          reduce using rule 26 (statement -> expression END .)


state 95

    (28) if_statement -> IF LPAREN . expression RPAREN scope else_statement
    (36) expression -> . comparison_layer
    (37) expression -> . expression OR comparison_layer
    (38) expression -> . expression AND comparison_layer
    (39) expression -> . ID LSBRACKET arithmetic_layer RSBRACKET
    (40) comparison_layer -> . arithmetic_layer
    (41) comparison_layer -> . comparison_layer COMPARATOR arithmetic_layer
    (42) arithmetic_layer -> . term
    (43) arithmetic_layer -> . arithmetic_layer MINUS term
    (44) arithmetic_layer -> . arithmetic_layer PLUS term
    (45) term -> . factor
    (46) term -> . term DIVISION factor
    (47) term -> . term MULTIPLICATION factor
    (48) factor -> . ID
    (49) factor -> . value
    (50) factor -> . LPAREN expression RPAREN
    (51) factor -> . function_call
    (60) value -> . STRING_VALUE
    (61) value -> . CHAR_VALUE
    (62) value -> . BOOL_VALUE
    (63) value -> . FLOAT_VALUE
    (64) value -> . INTEGRAL_VALUE
    (12) function_call -> . ID LPAREN actual_params RPAREN
    ID              shift and go to state 43
    LPAREN          shift and go to state 25
    STRING_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    FLOAT_VALUE     shift and go to state 30
    INTEGRAL_VALUE  shift and go to state 31

    expression                     shift and go to state 101
    comparison_layer               shift and go to state 42
    arithmetic_layer               shift and go to state 44
    term                           shift and go to state 22
    factor                         shift and go to state 23
    value                          shift and go to state 24
    function_call                  shift and go to state 26

state 96

    (27) while_statement -> WHILE LPAREN . expression RPAREN scope
    (36) expression -> . comparison_layer
    (37) expression -> . expression OR comparison_layer
    (38) expression -> . expression AND comparison_layer
    (39) expression -> . ID LSBRACKET arithmetic_layer RSBRACKET
    (40) comparison_layer -> . arithmetic_layer
    (41) comparison_layer -> . comparison_layer COMPARATOR arithmetic_layer
    (42) arithmetic_layer -> . term
    (43) arithmetic_layer -> . arithmetic_layer MINUS term
    (44) arithmetic_layer -> . arithmetic_layer PLUS term
    (45) term -> . factor
    (46) term -> . term DIVISION factor
    (47) term -> . term MULTIPLICATION factor
    (48) factor -> . ID
    (49) factor -> . value
    (50) factor -> . LPAREN expression RPAREN
    (51) factor -> . function_call
    (60) value -> . STRING_VALUE
    (61) value -> . CHAR_VALUE
    (62) value -> . BOOL_VALUE
    (63) value -> . FLOAT_VALUE
    (64) value -> . INTEGRAL_VALUE
    (12) function_call -> . ID LPAREN actual_params RPAREN
    ID              shift and go to state 43
    LPAREN          shift and go to state 25
    STRING_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    FLOAT_VALUE     shift and go to state 30
    INTEGRAL_VALUE  shift and go to state 31

    expression                     shift and go to state 102
    comparison_layer               shift and go to state 42
    arithmetic_layer               shift and go to state 44
    term                           shift and go to state 22
    factor                         shift and go to state 23
    value                          shift and go to state 24
    function_call                  shift and go to state 26

state 97

    (34) assignment -> ID LSBRACKET . arithmetic_layer RSBRACKET ASSIGN expression
    (39) expression -> ID LSBRACKET . arithmetic_layer RSBRACKET
    (4) array_name -> ID LSBRACKET . arithmetic_layer RSBRACKET
    (42) arithmetic_layer -> . term
    (43) arithmetic_layer -> . arithmetic_layer MINUS term
    (44) arithmetic_layer -> . arithmetic_layer PLUS term
    (45) term -> . factor
    (46) term -> . term DIVISION factor
    (47) term -> . term MULTIPLICATION factor
    (48) factor -> . ID
    (49) factor -> . value
    (50) factor -> . LPAREN expression RPAREN
    (51) factor -> . function_call
    (60) value -> . STRING_VALUE
    (61) value -> . CHAR_VALUE
    (62) value -> . BOOL_VALUE
    (63) value -> . FLOAT_VALUE
    (64) value -> . INTEGRAL_VALUE
    (12) function_call -> . ID LPAREN actual_params RPAREN
    ID              shift and go to state 20
    LPAREN          shift and go to state 25
    STRING_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    FLOAT_VALUE     shift and go to state 30
    INTEGRAL_VALUE  shift and go to state 31

    arithmetic_layer               shift and go to state 103
    term                           shift and go to state 22
    factor                         shift and go to state 23
    value                          shift and go to state 24
    function_call                  shift and go to state 26

state 98

    (35) assignment -> ID ASSIGN . expression
    (36) expression -> . comparison_layer
    (37) expression -> . expression OR comparison_layer
    (38) expression -> . expression AND comparison_layer
    (39) expression -> . ID LSBRACKET arithmetic_layer RSBRACKET
    (40) comparison_layer -> . arithmetic_layer
    (41) comparison_layer -> . comparison_layer COMPARATOR arithmetic_layer
    (42) arithmetic_layer -> . term
    (43) arithmetic_layer -> . arithmetic_layer MINUS term
    (44) arithmetic_layer -> . arithmetic_layer PLUS term
    (45) term -> . factor
    (46) term -> . term DIVISION factor
    (47) term -> . term MULTIPLICATION factor
    (48) factor -> . ID
    (49) factor -> . value
    (50) factor -> . LPAREN expression RPAREN
    (51) factor -> . function_call
    (60) value -> . STRING_VALUE
    (61) value -> . CHAR_VALUE
    (62) value -> . BOOL_VALUE
    (63) value -> . FLOAT_VALUE
    (64) value -> . INTEGRAL_VALUE
    (12) function_call -> . ID LPAREN actual_params RPAREN
    ID              shift and go to state 43
    LPAREN          shift and go to state 25
    STRING_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    FLOAT_VALUE     shift and go to state 30
    INTEGRAL_VALUE  shift and go to state 31

    expression                     shift and go to state 104
    comparison_layer               shift and go to state 42
    arithmetic_layer               shift and go to state 44
    term                           shift and go to state 22
    factor                         shift and go to state 23
    value                          shift and go to state 24
    function_call                  shift and go to state 26

state 99

    (33) declaration_init -> var_name COLON . type ASSIGN expression
    (32) declaration -> var_name COLON . type
    (52) type -> . BOOL_TYPE
    (53) type -> . STRING_TYPE
    (54) type -> . CHAR_TYPE
    (55) type -> . FLOAT_TYPE
    (56) type -> . UNSIGNED_TYPE
    (57) type -> . SIGNED_TYPE
    BOOL_TYPE       shift and go to state 14
    STRING_TYPE     shift and go to state 15
    CHAR_TYPE       shift and go to state 16
    FLOAT_TYPE      shift and go to state 17
    UNSIGNED_TYPE   shift and go to state 18
    SIGNED_TYPE     shift and go to state 19

    type                           shift and go to state 105

state 100

    (65) scope -> LBRACE new_scope statements pop_scope RBRACE .
    ID              reduce using rule 65 (scope -> LBRACE new_scope statements pop_scope RBRACE .)
    $end            reduce using rule 65 (scope -> LBRACE new_scope statements pop_scope RBRACE .)
    END             reduce using rule 65 (scope -> LBRACE new_scope statements pop_scope RBRACE .)
    IF              reduce using rule 65 (scope -> LBRACE new_scope statements pop_scope RBRACE .)
    WHILE           reduce using rule 65 (scope -> LBRACE new_scope statements pop_scope RBRACE .)
    LBRACE          reduce using rule 65 (scope -> LBRACE new_scope statements pop_scope RBRACE .)
    LPAREN          reduce using rule 65 (scope -> LBRACE new_scope statements pop_scope RBRACE .)
    STRING_VALUE    reduce using rule 65 (scope -> LBRACE new_scope statements pop_scope RBRACE .)
    CHAR_VALUE      reduce using rule 65 (scope -> LBRACE new_scope statements pop_scope RBRACE .)
    BOOL_VALUE      reduce using rule 65 (scope -> LBRACE new_scope statements pop_scope RBRACE .)
    FLOAT_VALUE     reduce using rule 65 (scope -> LBRACE new_scope statements pop_scope RBRACE .)
    INTEGRAL_VALUE  reduce using rule 65 (scope -> LBRACE new_scope statements pop_scope RBRACE .)
    RBRACE          reduce using rule 65 (scope -> LBRACE new_scope statements pop_scope RBRACE .)
    ELSE            reduce using rule 65 (scope -> LBRACE new_scope statements pop_scope RBRACE .)


state 101

    (28) if_statement -> IF LPAREN expression . RPAREN scope else_statement
    (37) expression -> expression . OR comparison_layer
    (38) expression -> expression . AND comparison_layer
    RPAREN          shift and go to state 106
    OR              shift and go to state 56
    AND             shift and go to state 57


state 102

    (27) while_statement -> WHILE LPAREN expression . RPAREN scope
    (37) expression -> expression . OR comparison_layer
    (38) expression -> expression . AND comparison_layer
    RPAREN          shift and go to state 107
    OR              shift and go to state 56
    AND             shift and go to state 57


state 103

    (34) assignment -> ID LSBRACKET arithmetic_layer . RSBRACKET ASSIGN expression
    (39) expression -> ID LSBRACKET arithmetic_layer . RSBRACKET
    (4) array_name -> ID LSBRACKET arithmetic_layer . RSBRACKET
    (43) arithmetic_layer -> arithmetic_layer . MINUS term
    (44) arithmetic_layer -> arithmetic_layer . PLUS term
    RSBRACKET       shift and go to state 108
    MINUS           shift and go to state 37
    PLUS            shift and go to state 38


state 104

    (35) assignment -> ID ASSIGN expression .
    (37) expression -> expression . OR comparison_layer
    (38) expression -> expression . AND comparison_layer
    END             reduce using rule 35 (assignment -> ID ASSIGN expression .)
    OR              shift and go to state 56
    AND             shift and go to state 57


state 105

    (33) declaration_init -> var_name COLON type . ASSIGN expression
    (32) declaration -> var_name COLON type .
    ASSIGN          shift and go to state 109
    END             reduce using rule 32 (declaration -> var_name COLON type .)


state 106

    (28) if_statement -> IF LPAREN expression RPAREN . scope else_statement
    (65) scope -> . LBRACE new_scope statements pop_scope RBRACE
    LBRACE          shift and go to state 61

    scope                          shift and go to state 110

state 107

    (27) while_statement -> WHILE LPAREN expression RPAREN . scope
    (65) scope -> . LBRACE new_scope statements pop_scope RBRACE
    LBRACE          shift and go to state 61

    scope                          shift and go to state 111

state 108

    (34) assignment -> ID LSBRACKET arithmetic_layer RSBRACKET . ASSIGN expression
    (39) expression -> ID LSBRACKET arithmetic_layer RSBRACKET .
    (4) array_name -> ID LSBRACKET arithmetic_layer RSBRACKET .
    ASSIGN          shift and go to state 112
    END             reduce using rule 39 (expression -> ID LSBRACKET arithmetic_layer RSBRACKET .)
    OR              reduce using rule 39 (expression -> ID LSBRACKET arithmetic_layer RSBRACKET .)
    AND             reduce using rule 39 (expression -> ID LSBRACKET arithmetic_layer RSBRACKET .)
    COLON           reduce using rule 4 (array_name -> ID LSBRACKET arithmetic_layer RSBRACKET .)


state 109

    (33) declaration_init -> var_name COLON type ASSIGN . expression
    (36) expression -> . comparison_layer
    (37) expression -> . expression OR comparison_layer
    (38) expression -> . expression AND comparison_layer
    (39) expression -> . ID LSBRACKET arithmetic_layer RSBRACKET
    (40) comparison_layer -> . arithmetic_layer
    (41) comparison_layer -> . comparison_layer COMPARATOR arithmetic_layer
    (42) arithmetic_layer -> . term
    (43) arithmetic_layer -> . arithmetic_layer MINUS term
    (44) arithmetic_layer -> . arithmetic_layer PLUS term
    (45) term -> . factor
    (46) term -> . term DIVISION factor
    (47) term -> . term MULTIPLICATION factor
    (48) factor -> . ID
    (49) factor -> . value
    (50) factor -> . LPAREN expression RPAREN
    (51) factor -> . function_call
    (60) value -> . STRING_VALUE
    (61) value -> . CHAR_VALUE
    (62) value -> . BOOL_VALUE
    (63) value -> . FLOAT_VALUE
    (64) value -> . INTEGRAL_VALUE
    (12) function_call -> . ID LPAREN actual_params RPAREN
    ID              shift and go to state 43
    LPAREN          shift and go to state 25
    STRING_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    FLOAT_VALUE     shift and go to state 30
    INTEGRAL_VALUE  shift and go to state 31

    expression                     shift and go to state 113
    comparison_layer               shift and go to state 42
    arithmetic_layer               shift and go to state 44
    term                           shift and go to state 22
    factor                         shift and go to state 23
    value                          shift and go to state 24
    function_call                  shift and go to state 26

state 110

    (28) if_statement -> IF LPAREN expression RPAREN scope . else_statement
    (29) else_statement -> .
    (30) else_statement -> . ELSE if_statement
    (31) else_statement -> . ELSE scope
    END             reduce using rule 29 (else_statement -> .)
    IF              reduce using rule 29 (else_statement -> .)
    WHILE           reduce using rule 29 (else_statement -> .)
    LBRACE          reduce using rule 29 (else_statement -> .)
    ID              reduce using rule 29 (else_statement -> .)
    LPAREN          reduce using rule 29 (else_statement -> .)
    STRING_VALUE    reduce using rule 29 (else_statement -> .)
    CHAR_VALUE      reduce using rule 29 (else_statement -> .)
    BOOL_VALUE      reduce using rule 29 (else_statement -> .)
    FLOAT_VALUE     reduce using rule 29 (else_statement -> .)
    INTEGRAL_VALUE  reduce using rule 29 (else_statement -> .)
    RBRACE          reduce using rule 29 (else_statement -> .)
    ELSE            shift and go to state 115

    else_statement                 shift and go to state 114

state 111

    (27) while_statement -> WHILE LPAREN expression RPAREN scope .
    END             reduce using rule 27 (while_statement -> WHILE LPAREN expression RPAREN scope .)
    IF              reduce using rule 27 (while_statement -> WHILE LPAREN expression RPAREN scope .)
    WHILE           reduce using rule 27 (while_statement -> WHILE LPAREN expression RPAREN scope .)
    LBRACE          reduce using rule 27 (while_statement -> WHILE LPAREN expression RPAREN scope .)
    ID              reduce using rule 27 (while_statement -> WHILE LPAREN expression RPAREN scope .)
    LPAREN          reduce using rule 27 (while_statement -> WHILE LPAREN expression RPAREN scope .)
    STRING_VALUE    reduce using rule 27 (while_statement -> WHILE LPAREN expression RPAREN scope .)
    CHAR_VALUE      reduce using rule 27 (while_statement -> WHILE LPAREN expression RPAREN scope .)
    BOOL_VALUE      reduce using rule 27 (while_statement -> WHILE LPAREN expression RPAREN scope .)
    FLOAT_VALUE     reduce using rule 27 (while_statement -> WHILE LPAREN expression RPAREN scope .)
    INTEGRAL_VALUE  reduce using rule 27 (while_statement -> WHILE LPAREN expression RPAREN scope .)
    RBRACE          reduce using rule 27 (while_statement -> WHILE LPAREN expression RPAREN scope .)


state 112

    (34) assignment -> ID LSBRACKET arithmetic_layer RSBRACKET ASSIGN . expression
    (36) expression -> . comparison_layer
    (37) expression -> . expression OR comparison_layer
    (38) expression -> . expression AND comparison_layer
    (39) expression -> . ID LSBRACKET arithmetic_layer RSBRACKET
    (40) comparison_layer -> . arithmetic_layer
    (41) comparison_layer -> . comparison_layer COMPARATOR arithmetic_layer
    (42) arithmetic_layer -> . term
    (43) arithmetic_layer -> . arithmetic_layer MINUS term
    (44) arithmetic_layer -> . arithmetic_layer PLUS term
    (45) term -> . factor
    (46) term -> . term DIVISION factor
    (47) term -> . term MULTIPLICATION factor
    (48) factor -> . ID
    (49) factor -> . value
    (50) factor -> . LPAREN expression RPAREN
    (51) factor -> . function_call
    (60) value -> . STRING_VALUE
    (61) value -> . CHAR_VALUE
    (62) value -> . BOOL_VALUE
    (63) value -> . FLOAT_VALUE
    (64) value -> . INTEGRAL_VALUE
    (12) function_call -> . ID LPAREN actual_params RPAREN
    ID              shift and go to state 43
    LPAREN          shift and go to state 25
    STRING_VALUE    shift and go to state 27
    CHAR_VALUE      shift and go to state 28
    BOOL_VALUE      shift and go to state 29
    FLOAT_VALUE     shift and go to state 30
    INTEGRAL_VALUE  shift and go to state 31

    arithmetic_layer               shift and go to state 44
    expression                     shift and go to state 116
    comparison_layer               shift and go to state 42
    term                           shift and go to state 22
    factor                         shift and go to state 23
    value                          shift and go to state 24
    function_call                  shift and go to state 26

state 113

    (33) declaration_init -> var_name COLON type ASSIGN expression .
    (37) expression -> expression . OR comparison_layer
    (38) expression -> expression . AND comparison_layer
    END             reduce using rule 33 (declaration_init -> var_name COLON type ASSIGN expression .)
    OR              shift and go to state 56
    AND             shift and go to state 57


state 114

    (28) if_statement -> IF LPAREN expression RPAREN scope else_statement .
    END             reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN scope else_statement .)
    IF              reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN scope else_statement .)
    WHILE           reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN scope else_statement .)
    LBRACE          reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN scope else_statement .)
    ID              reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN scope else_statement .)
    LPAREN          reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN scope else_statement .)
    STRING_VALUE    reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN scope else_statement .)
    CHAR_VALUE      reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN scope else_statement .)
    BOOL_VALUE      reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN scope else_statement .)
    FLOAT_VALUE     reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN scope else_statement .)
    INTEGRAL_VALUE  reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN scope else_statement .)
    RBRACE          reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN scope else_statement .)


state 115

    (30) else_statement -> ELSE . if_statement
    (31) else_statement -> ELSE . scope
    (28) if_statement -> . IF LPAREN expression RPAREN scope else_statement
    (65) scope -> . LBRACE new_scope statements pop_scope RBRACE
    IF              shift and go to state 84
    LBRACE          shift and go to state 61

    if_statement                   shift and go to state 117
    scope                          shift and go to state 118

state 116

    (34) assignment -> ID LSBRACKET arithmetic_layer RSBRACKET ASSIGN expression .
    (37) expression -> expression . OR comparison_layer
    (38) expression -> expression . AND comparison_layer
    END             reduce using rule 34 (assignment -> ID LSBRACKET arithmetic_layer RSBRACKET ASSIGN expression .)
    OR              shift and go to state 56
    AND             shift and go to state 57


state 117

    (30) else_statement -> ELSE if_statement .
    END             reduce using rule 30 (else_statement -> ELSE if_statement .)
    IF              reduce using rule 30 (else_statement -> ELSE if_statement .)
    WHILE           reduce using rule 30 (else_statement -> ELSE if_statement .)
    LBRACE          reduce using rule 30 (else_statement -> ELSE if_statement .)
    ID              reduce using rule 30 (else_statement -> ELSE if_statement .)
    LPAREN          reduce using rule 30 (else_statement -> ELSE if_statement .)
    STRING_VALUE    reduce using rule 30 (else_statement -> ELSE if_statement .)
    CHAR_VALUE      reduce using rule 30 (else_statement -> ELSE if_statement .)
    BOOL_VALUE      reduce using rule 30 (else_statement -> ELSE if_statement .)
    FLOAT_VALUE     reduce using rule 30 (else_statement -> ELSE if_statement .)
    INTEGRAL_VALUE  reduce using rule 30 (else_statement -> ELSE if_statement .)
    RBRACE          reduce using rule 30 (else_statement -> ELSE if_statement .)


state 118

    (31) else_statement -> ELSE scope .
    END             reduce using rule 31 (else_statement -> ELSE scope .)
    IF              reduce using rule 31 (else_statement -> ELSE scope .)
    WHILE           reduce using rule 31 (else_statement -> ELSE scope .)
    LBRACE          reduce using rule 31 (else_statement -> ELSE scope .)
    ID              reduce using rule 31 (else_statement -> ELSE scope .)
    LPAREN          reduce using rule 31 (else_statement -> ELSE scope .)
    STRING_VALUE    reduce using rule 31 (else_statement -> ELSE scope .)
    CHAR_VALUE      reduce using rule 31 (else_statement -> ELSE scope .)
    BOOL_VALUE      reduce using rule 31 (else_statement -> ELSE scope .)
    FLOAT_VALUE     reduce using rule 31 (else_statement -> ELSE scope .)
    INTEGRAL_VALUE  reduce using rule 31 (else_statement -> ELSE scope .)
    RBRACE          reduce using rule 31 (else_statement -> ELSE scope .)
